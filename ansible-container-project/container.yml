version: "2"
settings:

  conductor:
    # The Conductor container does the heavy lifting, and provides a portable
    # Python runtime for building your target containers. It should be derived
    # from the same distribution as you're building your target containers with.
    base: centos:7
    # roles_path:   # Specify a local path containing Ansible roles
    # volumes:      # Provide a list of volumes to mount
    # environment:  # List or mapping of environment variables
    save: yes
    roles_path:
      - /etc/ansible/roles
  # Set the name of the project. Defaults to basename of the project directory.
  # For built services, concatenated with service name to form the built image name.
  project_name: ansible-container-project
    
  # The deployment_output_path is mounted to the Conductor container, and the 
  # `run` and `deployment` commands then write generated Ansible playbooks to it.
  # deployment_output_path: ./ansible-deployment

  # When using the k8s or openshift engines, use the following to authorize with the API.
  # Values set here will be passed to the Ansible modules. Any file paths will be mounted
  # to the conductor container, allowing the `run` command to access the API.
  #k8s_auth:
    # path to a K8s config file
    #config_file:
    # name of a context found within the config file
    #context:
    # URL for accessing the K8s API
    #host:
    # An API authentication token
    #api_key:
    # Path to a ca cert file
    #ssl_ca_cert:
    # Path to a cert file
    #cert_file:
    # Path to a key file
    #key_file:
    # boolean, indicating if SSL certs should be validated
    #verify_ssl:

  # When using the k8s or openshift engines, use the following to set the namespace.
  # If not set, the project name will be used. For openshift, the namespace maps to a project,
  # and description and display_name are supported.
  #k8s_namespace:
  #  name:
  #  description:
  #  display_name:

defaults:
  ACTIVEMQ_DATAPATH: /data/activemq
  ACTIVEMQ_ADMIN: admin
  ACTIVEMQ_ADMIN_PASSWORD: Seminar2017
  ACTIVEMQ_STATIC_QUEUES: mytestqueue
  ACTIVEMQ_STATIC_TOPICS: mytesttopic
  QUEUE_PORT: 61616
  ACTIVEMQ_HOSTNAME: amq.test.local
  ACTIVEMQ_CONF: /root/ansible-container/project/etc/activemq/conf

  # Config files inside the MQ container are located in /opt/activemq/conf
  # running with '-v /mymqconf/path:/opt/activemq/conf' can make your config available inside the container
  #

services: {}
  # Add your containers here, specifying the base image you want to build from.
  # To use this example, uncomment it and delete the curly braces after services key.
  # You may need to run `docker pull ubuntu:trusty` for this to work.

    frontend:
      from: "centos:7"
      ports:
        - "2200:22"
      command: ["/root/myscript.py"]
      def_overrides:
        environment:
          - "DEBUG=1"
      roles:
        - python3
      
      # messaging wird ein Container auf Basis des webcenter/activemq images
      # ActiveMQ 5.14.3 with OpenJDK-jre-8-headless on Ubuntu 15.10 
    messaging:
            from: "webcenter/activemq:latest"      
      ports:
        - "61616:61616"
        - "8161:8161"
        - "61613:61613"
      command: ["/usr/bin/activemq", "console"]    

  # web:
  #   from: "centos:7"
  #   ports:
  #     - "80:80"
  #   command: ["/usr/bin/dumb-init", "/usr/sbin/apache2ctl", "-D", "FOREGROUND"]
  #   dev_overrides:
  #     environment:
  #       - "DEBUG=1"
registries: {}
  # Add optional registries used for deployment. For example:
  #  google:
  #    url: https://gcr.io
  #    namespace: my-cool-project-xxxxxx   
